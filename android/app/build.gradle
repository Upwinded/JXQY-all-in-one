import groovy.xml.XmlParser

plugins {
     id 'com.android.application'
}

def buildWithCMake = true; //project.hasProperty('BUILD_WITH_CMAKE');
def appName = "jxqy2";
def appNameCN = "剑侠情缘2";
def appVersion = "1.4.1"

android {
    namespace = "org.libsdl.app"
    compileSdk 36
    buildFeatures {
        prefab true
    }
    defaultConfig {
        resValue "string", "app_name", appName
        resValue "string", "app_name_cn", appNameCN
        applicationId = "com.jxqy_all_in_one.${appName}";
        minSdkVersion 28
        targetSdk 36
        versionCode 1
        versionName "${appVersion}"
        externalNativeBuild {
            ndkBuild {
                cppFlags '-std=c++17'
                arguments "APP_PLATFORM=android-21"
                // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                abiFilters 'arm64-v8a', 'x86_64'
            }
            cmake {
                cppFlags '-std=c++17'
                //arguments "-DANDROID_PLATFORM=android-21", "-DANDROID_STL=c++_static", "-DAPP_SUPPORT_FLEXIBLE_PAGE_SIZES=true"
                // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
                abiFilters 'arm64-v8a', 'x86_64'
            }
        }
    }

    sourceSets {
        main {
            assets {
                srcDirs = ['../../assets']
                exclude '../../assets/save/game/*'
                exclude '../../assets/save/rpg1/*'
                exclude '../../assets/save/rpg2/*'
                exclude '../../assets/save/rpg3/*'
                exclude '../../assets/save/rpg4/*'
                exclude '../../assets/save/rpg5/*'
                exclude '../../assets/save/rpg6/*'
                exclude '../../assets/save/rpg7/*'
                exclude '../../assets/save/rpg8/*'
                exclude '../../assets/save/rpg9/*'
                exclude '../../assets/save/shot/*'
                exclude '../../assets/config/*.ini'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        // tasks["merge${variant.name.capitalize()}Assets"]
        //     .dependsOn("externalNativeBuild${variant.name.capitalize()}")
        def outputAPKName = "${appName}_${variant.name}_${appVersion}.apk";
        def outputApkPath = variant.getPackageApplicationProvider().get().outputDirectory.getAsFile().get().getPath()
        variant.outputs.all {
            outputFileName = outputAPKName
        }
        variant.outputs.all {
            variant.assembleProvider.get().doLast {
                //cp位置
                copy {
                    //apk files
                    from outputApkPath
                    duplicatesStrategy = DuplicatesStrategy.INCLUDE
                    include '**/*.apk'

                    into '../../bin/android'
                }
//                delete outputFile
            }
        }
        variant.mergeAssets.doLast {
            delete(fileTree(dir: variant.mergeAssets.outputDir, includes: ['save/game/*.npc', 'save/game/*.obj','save/game/*.ini','save/game/*.txt',
                                                                           'save/rpg1/*.npc', 'save/rpg1/*.obj','save/rpg1/*.ini','save/rpg1/*.txt',
                                                                           'save/rpg2/*.npc', 'save/rpg2/*.obj','save/rpg2/*.ini','save/rpg2/*.txt',
                                                                           'save/rpg3/*.npc', 'save/rpg3/*.obj','save/rpg3/*.ini','save/rpg3/*.txt',
                                                                           'save/rpg4/*.npc', 'save/rpg4/*.obj','save/rpg4/*.ini','save/rpg4/*.txt',
                                                                           'save/rpg5/*.npc', 'save/rpg5/*.obj','save/rpg5/*.ini','save/rpg5/*.txt',
                                                                           'save/rpg6/*.npc', 'save/rpg6/*.obj','save/rpg6/*.ini','save/rpg6/*.txt',
                                                                           'save/rpg7/*.npc', 'save/rpg7/*.obj','save/rpg7/*.ini','save/rpg7/*.txt',
                                                                           'save/shot/*.bmp', 'config/*.ini']))

        }
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            if (buildWithCMake) {
                cmake {
                    path 'jni/CMakeLists.txt'
                }
            } else {
                ndkBuild {
                    path 'jni/Android.mk'
                }
            }
        }

    }
    lint {
        abortOnError = false
    }

    tasks.register("copySdlAars", Copy) {
        from fileTree("../../ThirdParty/devel/android/SDL")
        into "libs"
        include "*.aar"
    }

    preBuild.dependsOn(tasks.named("copySdlAars"))
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation fileTree(include: ['*.aar'], dir: 'libs')
    implementation files('../../ThirdParty/devel/android/fmod/lib/fmod.jar')
    //implementation fileTree(include: ['*.arr'], dir: '../../ThirdParty/devel/android/SDL/')
}

clean {
    println("clean APK")
    //clean 成功
    doLast {
        def tree = fileTree(new File(project.rootDir, '../bin/android'))
        tree.include '*.apk'
        long now = System.currentTimeMillis()
        //println now
        tree.each {
            //println (it.lastModified())
            println("clean del: " + it.name)
            it.delete()
        }
    }
}